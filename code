import numpy as np
import copy as cp


##### Factors #####
#The various factors that account for the payoffs of each actor.

# God's Favor
#A truthful belief in god is rewarded greatly
Favor = 3

# God's Disfavor
#God punishes heathens greatly
Disfavor = -3

# Agreement
#Those in agreement are happier
Agreement = 2

# Disagreement
#Those in disagreement are unhappier
Disagreement = -2

# Skepticism
#A successful nonbelief in God's existence is accurate
Skepticism = 2

# Delusion
#Fallacious faith in God is an inconvenient belief
Delusion = -2

# BaseMatrix
#An array of 2 2darrays that each represent
#the payoff matrix for group 1 and group 2 respectively.
BaseMatrix = np.zeros((2, 2, 2))

##### Implementation #####
# Implementation of each factor on the payoff matrix accounting for that factor.

# mirth(3darray)
#Accounting for Favor
def mirth(matrix):
    newMatrix = cp.copy(matrix)
    #Player 1:
    for i in [newMatrix[0][0, :]]:
        i += Favor
    #Player 2:
    for i in [newMatrix[1][:, 0]]:
        i += Favor
    return newMatrix

# antiMirth(3darray)
#Accounting for Favor; used for AntiGod scenario
def antiMirth(matrix):
    newMatrix = cp.copy(matrix)
    #Player 1:
    for i in [newMatrix[0][1, :]]:
        i += Favor
    #Player 2:
    for i in [newMatrix[1][:, 1]]:
        i += Favor
    return newMatrix

# wrath(3darray)
#Accounting for Disfavor
def wrath(matrix):
    newMatrix = cp.copy(matrix)
    #Player 1:
    for i in [newMatrix[0][1, :]]:
        i += Disfavor
    #Player 2:
    for i in [newMatrix[1][:, 1]]:
        i += Disfavor
        return newMatrix

# antiWrath(3darray)
#Accounting for Disfavor; used for AntiGod scenario
def antiWrath(matrix):
    newMatrix = cp.copy(matrix)
    #Player 1:
    for i in [newMatrix[0][0, :]]:
        i += Disfavor
    #Player 2:
    for i in [newMatrix[1][:, 0]]:
        i += Disfavor
        return newMatrix

# coexistence(3darray)
#Accounting for Agreement
def coexistence(matrix):
    newMatrix = cp.copy(matrix)
    #Player 1:
    newMatrix[0][-1][1] += Agreement
    newMatrix[0][0][0] += Agreement
    #Player 2:
    newMatrix[1][1][1] += Agreement
    newMatrix[1][0][0] += Agreement
    return newMatrix

# strife(3darray)
#Accounting for Disagreement
def strife(matrix):
    newMatrix = cp.copy(matrix)
    #Player 1:
    newMatrix[0][0][1] += Disagreement
    newMatrix[0][1][0] += Disagreement
    #Player 2:
    newMatrix[1][0][1] += Disagreement
    newMatrix[1][1][0] += Disagreement
    return newMatrix

# atheism(3darray)
#Accounting for Skepticism
def atheism(matrix):
    newMatrix = cp.copy(matrix)
    #Player 1:
    for i in [newMatrix[0][1, :]]:
        i += Skepticism
    #Player 2:
    for i in [newMatrix[1][:, 1]]:
        i += Skepticism
    return newMatrix
        
# misguidance(3darray)
#Accounting for Delusion
def misguidance(matrix):
    newMatrix = cp.copy(matrix)
    #Player 1:
    for i in [newMatrix[0][0, :]]:
        i += Delusion
    #Player 2:
    for i in [newMatrix[1][:, 0]]:
        i += Delusion
    return newMatrix

        
##### Scenarios #####
#Four distinct scenarios

# GExist (3darray)
#The function representing a scenario where God exists.
#Accounts for Favor, Disfavor, Agreement, and Disagreement.
def GExist(matrix):
    return mirth(wrath(coexistence(strife(matrix))))

# GDExist (3darray)
#The function representing a scenario where God doesn't exist.
#Accounts for Skepticism, Delusion, Agreement, and Disagreement.
def GDExist(matrix):
#    atheism(BaseMatrix)
#    misguidance(BaseMatrix)
#    coexistence(BaseMatrix)
#    strife(BaseMatrix)
    return atheism(misguidance(coexistence(strife(matrix))))

# GDCare(3darray)
#The function representing a scenario where God doesn't care.
#Accounts for Agreement and Disagreement only.
def GDCare(matrix):
    return coexistence(strife(matrix))

# AntiGod(3darray)
#The function representing a scenario where belief in God is punished.
#Accounts for reversed Favor, reversed Disfavor, Agreement, and Disagreement.
def AntiGod(matrix):
    
    return antiMirth(antiWrath(coexistence(strife(matrix))))


##### Choice Functions #####
#The functions that dictate the choicemaking process of each player

# p1Choose(3darray)
#Calculates Player 1's initial choice
def p1Choose(matrix):
    if matrix[0].sum(axis = 1)[0] == matrix[0].sum(axis = 1)[1]:
        return -1
    else:
        return np.argmax(matrix[0].sum(axis = 1))

# p2Choose(3darray)
#Calculates Player 2's initial choice
def p2Choose(matrix):
    if matrix[1].sum(axis = 1)[0] == matrix[1].sum(axis = 0)[1]:
        return -1
    else:
        return np.argmax(matrix[1].sum(axis = 0))

# p1ChooseMeta(3darray, int)
#Calculates Player 1's choice, accounting for what Player 2 might do
#Iterations is the amount of thought Player 1 gives to Player 2's
#choice when making their own choice
def p1ChooseMeta(matrix, iterations):
    choice = 0
    if matrix[0].sum(axis = 1)[0] == matrix[0].sum(axis = 1)[1]:
        return -1
    elif (iterations == 1):
        choice = np.argmax(matrix[0][:,p2Choose(matrix)])
    else:
        choice = np.argmax(matrix[0][:,p2ChooseMeta(matrix, iterations - 1)])
    return choice

# p2ChooseMeta(3darray, int)
#Calculates Player 2's choice, accounting for what Player 1 might do
#Iterations is the amount of thought Player 2 gives to Player 1's
#choice when making their own choice
def p2ChooseMeta(matrix, iterations):
    choice = 0
    if matrix[1].sum(axis = 1)[0] == matrix[1].sum(axis = 0)[1]:
        return -1
    elif iterations == 1:
        choice = np.argmax(matrix[1][p1Choose(matrix)])
    else:
        choice = np.argmax(matrix[1][p1ChooseMeta(matrix, iterations - 1)])
    return choice

# p1Stakes(3darray, int)
#Calculates Player 1's stakes for a given choice, accounting for
#what Player 2 might do
#Iterations is the amount of thought Player 1 gives to Player 2's
#choice when calculating their own stakes
def p1Stakes(matrix, iterations):
    stakes = 0
    if p1Choose(matrix) == -1:
        return stakes
    elif iterations == 1:
        stakes = max(matrix[0][:,p2Choose(matrix)]) - min(matrix[0][:,p2Choose(matrix)])
    else:
        stakes = max(matrix[0][:,p2ChooseMeta(matrix, iterations - 1)]) - min(matrix[0][:,p2ChooseMeta(matrix, iterations - 1)])
    return stakes

# p2Stakes(3darray, int)
#Calculates Player 2's stakes for a given choice, accounting for
#what Player 1 might do
#Iterations is the amount of thought Player 2 gives to Player 1's
#choice when calculating their own stakes
def p2Stakes(matrix, iterations):
    stakes = 0
    if p1Choose(matrix) == -1:
        return stakes
    elif iterations == 1:
        stakes = max(matrix[1][p1Choose(matrix)]) - min(matrix[1][p1Choose(matrix)])
    else:
        stakes = max(matrix[1][p1ChooseMeta(matrix, iterations - 1)]) - min(matrix[1][p1ChooseMeta(matrix, iterations - 1)])
    return stakes


# p1ChooseGuessing(int)
#Calculates Player 1's choice, accounting not only for what Player 1
#might do, but also any of the scenarios as a potential matrix.
#Iterations is the amount of thought Player 1 gives to Player 2's
#choice when making their own choice.
def p1ChooseGuessing(iterations):
    #The choices for each given scenario, from the list Scenarios
    choices = np.zeros(len(Scenarios))
    #The weight that each choice has
    weights = np.zeros(len(Scenarios))
    for i in range(len(Scenarios)):
        choices[i] = p1ChooseMeta(Scenarios[i](BaseMatrix), iterations)
        weights[i] = p1Stakes(Scenarios[i](BaseMatrix), iterations)
    weightedChoices = [choices, weights]
    choice = 0
#weightedChoices no longer follows the same syntax after this loop.
    for i in range(np.shape(weightedChoices)[1]):
        if weightedChoices[0][i] == 0:
            weightedChoices[0][i] = -1
        choice += weightedChoices[0][i] * weightedChoices[1][i]
    if choice > 0:
        return 1
    elif choice < 0:
        return 0
    else:
        return rd.randint(0, 1)

# p2ChooseGuessing(int)
#Calculates Player 2's choice, accounting not only for what Player 2
#might do, but also any of the scenarios as a potential matrix.
#Iterations is the amount of thought Player 2 gives to Player 1's
#choice when making their own choice.
def p2ChooseGuessing(iterations):
    #The choices for each given scenario, from the list Scenarios
    choices = np.zeros(len(Scenarios))
    #The weight that each choice has
    weights = np.zeros(len(Scenarios))
    for i in range(len(Scenarios)):
        choices[i] = p2ChooseMeta(Scenarios[i](BaseMatrix), iterations)
        weights[i] = p2Stakes(Scenarios[i](BaseMatrix), iterations)
    weightedChoices = [choices, weights]
    choice = 0
#weightedChoices no longer follows the same syntax after this loop.
    for i in range(np.shape(weightedChoices)[1]):
        if weightedChoices[0][i] == 0:
            weightedChoices[0][i] = -1
        choice += weightedChoices[0][i] * weightedChoices[1][i]
    if choice > 0:
        return 1
    elif choice < 0:
        return 0
    else:
        return rd.randint(0, 1)
